#!/usr/bin/env node
var fs = require("fs");

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('DataLoader_Api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}




function loadConfigurations(){
    var config = JSON.parse(fs.readFileSync("config.json"));
    //console.log(config);
    //app.set("dataLoader.py", config["dataLoader.py"]);
    //app.set("api_key", config["api_key"]);
    //app.set("api_submit_entry", config["api_submit_entry"]);
    //app.set("image_directory", config["image_directory"]);
    app.locals["dataLoader.py"] = config["dataLoader.py"];
    app.locals["api_key"] = config["api_key"];
    app.locals["api_submit_entry"] = config["api_submit_entry"];
    app.locals["image_directory"] = config["image_directory"];
    app.locals["api_get_md5_for_image"] = config["api_get_md5_for_image"];
    app.locals["api_subject_id_exists"] = config["api_subject_id_exists"];
    console.log(config["image_directory"])
    //console.log(app);
}




/**
 * Event listener for HTTP server "listening" event.
 */



function onListening() {
  loadConfigurations();

  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
